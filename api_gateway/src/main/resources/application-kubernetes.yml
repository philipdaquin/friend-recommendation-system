spring:
  config:
    activate:
      on-profile: kubernetes
  cloud:
    discovery:
      client:
        health-indicator:
          enabled: true
    
    gateway:
      default-filters:
      - SaveSession
      - TokenRelay
      - name: RequestRateLimiter
        args:
          redis-rate-limiter:
            replenishRate: 10
            burstCapacity: 20
            requestedTokens: 1
      httpclient:
        ssl:
          use-insecure-trust-manager: true
      discovery:
        locator:
          enabled: true
      
      routes:
      # Id - Every route requires a unique identifer 
      - id: user-service
        uri: lb://user-service
        predicates:
        - Path= /users/**
        filters: 
        - name: RewritePath
          args: 
            regexp: "/users/(?<remaining>.*)"
            replacement: "/api/v1/users/${remaining}"
        - name: CircuitBreaker 
          args:
            name: user-service
            fallbackuri: forward:/user-service-fallback
        # - name: RequestRateLimiter
        #   args:
        #     redis-rate-limiter.replenishRate: 10
        #     redis-rate-limiter.burstCapacity: 10
        #     redis-rate-limiter.requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            method: GET
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms

      - id: friend-service
        uri: lb://friend-service
        predicates:
        - Path= /friend/**
        filters: 
        - name: RewritePath
          args: 
            regexp: "/friend/(?<remaining>.*)"
            replacement: "/${remaining}"
        - name: CircuitBreaker 
          args:
            name: user-service
            fallbackuri: forward:/friend-service-fallback
        # - name: RequestRateLimiter
        #   args:
        #     redis-rate-limiter.replenishRate: 10
        #     redis-rate-limiter.burstCapacity: 10
        #     redis-rate-limiter.requestedTokens: 1

      - id: recommendation-service
        uri: lb://recommendation-service
        predicates:
        - Path= /recommendation/**
        filters: 
        - name: RewritePath
          args: 
            regexp: "/recommendation/(?<remaining>.*)"
            replacement: "/${remaining}"
        - name: CircuitBreaker 
          args:
            name: user-service
            fallbackuri: forward:/recommendation-service-fallback
        # - name: RequestRateLimiter
        #   args:
        #     redis-rate-limiter.replenishRate: 10
        #     redis-rate-limiter.burstCapacity: 10
        #     redis-rate-limiter.requestedTokens: 1


      #
      # Retry
      # - 
      #
      - id: retry
        uri: lb://api-gateway/8090
        predicates:
        - Path= /api-gateway/retry
        filters:
        - name: retry
          args:
            # Retries
            # - The number of retries that should be attempted
            retries: 3
            # Http Method 
            methods: GET
            series: SERVER_ERROR
            # Status
            # - The HTTP status codes  
            statuses: BAD_REQUEST, INTERNAL_SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException, org.springframework.web.client.HttpServerErrorException
            # Backoff
            # - The configured exponential backoff for the retries 
            backoff:
              firstBackoff: 10ms 
              maxBackoff: 500ms
              factor: 3
              basedOnPreviousValue: false
        

eureka:
  instance:
    hostname: localhost
    prefer-ip-address: true
  client:
    enabled: true
    register-with-eureka: true
    fetch-registry: true
    healthcheck:
      enabled: true
    serviceUrl:
      defaultZone: http://discovery-service:8761/eureka/

management: 
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
    health:
      probes:
        enabled: true
      show-details: always
      show-components: always
  endpoints:
    web:
      exposure:
        include: "*"
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: "http://tempo:9411/api/v2/spans"
  otlp:
    metrics:
      export:
        url: "http://otel-collector:4318/v1/metrics"
        step: 10s
        resource-attributes:
          service:
            name: ${spring.application.name}  
    tracing:
      endpoint: "http://otel-collector:4318/v1/traces"
  prometheus:
    metrics:
      export:
        step: 10s
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        all: true
        http.server.requests: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true

logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
  level:
    root: INFO
    com.example: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: TRACE
    

