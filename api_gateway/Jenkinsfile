pipeline { 
    agent any 
    environment { 
        APP_IMAGE = "philipasd/api_gateway"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        COMMIT_ID = "${env.BUILD_NUMBER}"

    }
    stages { 

        stage('Checkout') { 
            steps { 
                checkout scm 
            }
        }

        stage('Compile Code') {
            steps {
                sh 'cd api_gateway && ./mvnw clean compile'
            }
        } 
       
        stage ('Static Analysis') {
            steps {
                // Testingdcasddadasasdad
                // withCredentials([string(credentialsId: 'sonar', variable: 'sonartoken')]) {
                //     sh '''
                //         mvn clean compile -DskipTests=true sonar:sonar \
                //           -Dsonar.projectKey=java-devsecops \
                //           -Dsonar.host.url=http://sonarqube:9000 \
                //           -Dsonar.login=${sonartoken}
                //     '''
                // }
                echo "hello world hello there!"
            }
        }
        
        stage('Unit Test') {
            steps {
                sh 'cd api_gateway && ./mvnw test'
            }
        } 
        
        
        stage('Integration Test') { 
            steps { 
                // sh 'cd api_gateway && ./mvnw clean test -Pintegration-testing'
                // echo 'integration testing'
                sh 'cd api_gateway && ./mvnw test'
            }
        } 

        stage('End to End Test') { 
            steps { 
                // sh 'cd api_gateway && ./mvnw clean test -Pintegration-testing'
                // echo 'e2e tests'
                 sh 'cd api_gateway && ./mvnw test'
            }
        } 

      
        stage('Acceptance Test') { 
            steps { 
                // sh 'cd api_gateway && ./mvnw clean test -Pintegration-testing'
                // echo 'acceptance tests'
                 sh 'cd api_gateway && ./mvnw test'
            }
        } 

        stage("Performance tests") { 
            steps { 
                // sh 'cd api_gateway && ./mvnw clean jmeter:jmeter'
                // echo 'performance test'
                sh 'cd api_gateway && ./mvnw test'
            }
        }

        stage('Package Artifact Jar') {
            steps { 
                sh 'cd api_gateway && ./mvnw package'
            }
        }   

        stage('Build Docker Image') {
            steps { 
                sh "docker build -t ${APP_IMAGE}:0.0.3 -f api_gateway/Dockerfile api_gateway/"
            }
        } 

        stage('Push Image to DockerHub') {
           
            steps{
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh 'docker push ${APP_IMAGE}:0.0.3'
            }
        } 



    }
    post { 
        success { 
            echo "Build Success"
            echo "Successfully built ${env.JOB_NAME} - ${env.BUILD_ID} on ${env.BUILD_URL}" 
        }
        failure { 
            echo "Build failed - ${env.JOB_NAME} - ${env.BUILD_ID} on ${env.BUILD_URL}"
        }
        aborted { 
            echo "${env.JOB_NAME} Build - ${env.BUILD_ID} Aborted!"
        }
    }
}