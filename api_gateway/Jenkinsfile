pipeline { 
    agent any 

    environment { 
        dockerImageName = "philipasd/api_gateway"
    }
    stages { 

        stage('Checkout') { 

            // checkout scm 

            steps { 
                echo "Checking out"
            }
        }

        stage('Compile Code') {
            steps {
                sh 'cd api_gateway && ./`mvnw clean compile'
            }
        } 
        stage('Unit Test') {
            steps {
                sh 'cd api_gateway && ./mvnw test'
            }
        } 
        stage('Integration Test') { 
            steps { 
                sh 'cd api_gateway && ./mvnw verify'
            }
        } 
        stage('Package Artifact Jar') {
            steps { 
                sh 'cd api_gateway && ./mvnw package'
            }
        } 
        stage('Build Docker Image') {
            environment {
                // COMMIT_ID = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                COMMIT_ID = ${env.BUILD_NUMBER}
            }
            steps {
                sh "docker build -t ${dockerImageName}:${COMMIT_ID} -f api_gateway/Dockerfile api_gateway/"
            }
            // steps {
            //     sh "docker build -t ${dockerImageName} -f api_gateway/Dockerfile api_gateway/"
            // }
        } 
        // Update Deployment Yaml Files
        stage('Trigger ManifestUpdate') {
            echo "triggering updatemanifestjob"
            build job: 'updatemanifest', parameters: [string(name: 'DOCKERTAG', value: env.BUILD_NUMBER)]
        }



        // stage('Push Image to DockerHub') {
        //     steps { 
        //         script { 
        //             docker.withDockerRegistry('https://registry.hub.docker.com', registryCredential) { 
        //                 dockerImage.push()
        //                 dockerImage.push('latest')
        //             }
        //         }
        //     }
        // } 
//         stage('Update Kubertenes Deployment Instance') {
//             steps { 
//                 sh 'kubectl apply -f deployments/
// ' 
//             }
//         } 
    }
    post { 
        success { 
            echo "Build Success"
            echo "Successfully built ${env.JOB_NAME} - ${env.BUILD_ID} on ${env.BUILD_URL}" 
        }
        failure { 
            echo "Build failed - ${env.JOB_NAME} - ${env.BUILD_ID} on ${env.BUILD_URL}"
        }
        aborted { 
            echo "${env.JOB_NAME} Build - ${env.BUILD_ID} Aborted!"
        }
    }
}