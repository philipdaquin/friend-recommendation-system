version: '1.0'

services:


  discovery-service:
    build: ./discovery_service
    container_name: discovery_service
    networks:
      - friend-recommendation-system
    expose:
      - 8761
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
  
  friend-service:
    build: ./friend_service
    container_name: friend_service
    networks:
      - friend-recommendation-system
    expose:
      - 7001
    ports:
      - "7001:7001"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      kafka_broker: 
        condition: service_started
      mongo-db: 
        condition: service_started
  #
  #   RECOMMENDATION SERVICE
  #
  recommendation-service:
    build: ./recommendation_service
    container_name: recommendation-service
    networks:
      - friend-recommendation-system
    expose:
      - 7002
    ports:
      - "7002:7002"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      neo4j-db:
        condition: service_started
      kafka_broker: 
        condition: service_started
      zookeeper:
        condition: service_started
    
  #
  #   User Service 
  #
  user-service:
    build: ./user_service
    container_name: user-service
    expose:
      - 7000
    ports:
      - "7000:7000"
    depends_on:
      kafka_broker:
        condition: service_started
      postgres-db: 
        condition: service_started
      redis-db: 
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - friend-recommendation-system
  #
  #   API GATEWAY
  #
  api-gateway:  
    build: ./api_gateway
    container_name: api_gateway
    expose:
      - 9090
    ports:
      - "9090:9090"
    depends_on:
      redis-db: 
        condition: service_started
    networks:
      - friend-recommendation-system


  #
  #
  # Redis db
  redis-db:
    container_name: redis
    image: 'bitnami/redis:latest'
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=password
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - friend-recommendation-system
  
  #
  #
  # PostgreSQL
  #
  #
  postgres-db:
    image: postgres
    restart: always
    container_name: postgres-container-test
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./document/data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=users
    networks:
      - friend-recommendation-system
  #
  #   Apache Kafka Cluster 
  #
  # 
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - friend-recommendation-system
  #
  #   
  #
  #
  kafka_broker:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_broker
    ports:
      - "9091:9091"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker:9091
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - friend-recommendation-system

  #
  #
  # Mongo Db
  mongo-db:
    image: "mongo:latest"
    container_name: mongo-container
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - friend-recommendation-system
  
  #
  #
  # Neo4j
  #
  neo4j-db:
    container_name: neo4j
    image: bitnami/neo4j:latest
    ports:
      - "7475:7474"
      - "7687:7687"
      - "7473:7473"
    networks:
      - friend-recommendation-system
    environment:
      - NEO4J_PASSWORD= password
      - NEO4J_HOST= username
      - NEO4J_ALLOW_UPGRADE=true
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]



networks:
  friend-recommendation-system:
    external: false
    driver: bridge
    
volumes:
  mongodb_data_container:
  db-data:
  zookeeper_data:
    driver: bridge
  kafka_data:
    driver: bridge