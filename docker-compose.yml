version: '1.0'

services:


  discovery-service:
    build: ./discovery_service
    container_name: discovery_service
    networks:
      - friend-recommendation-system
    expose:
      - 8761
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOKI_URI=http://loki:3100/loki/api/v1/push
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
  
  friend-service:
    build: ./friend_service
    container_name: friend_service
    networks:
      - friend-recommendation-system
    expose:
      - 7001
    ports:
      - "7001:7001"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOKI_URI=http://loki:3100/loki/api/v1/push
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    depends_on:
      kafka_broker: 
        condition: service_started
      mongo-db: 
        condition: service_started
  #
  #   RECOMMENDATION SERVICE
  #
  recommendation-service:
    build: ./recommendation_service
    container_name: recommendation-service
    networks:
      - friend-recommendation-system
    expose:
      - 7002
    ports:
      - "7002:7002"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOKI_URI=http://loki:3100/loki/api/v1/push
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    depends_on:
      neo4j-db:
        condition: service_started
      kafka_broker: 
        condition: service_started
      zookeeper:
        condition: service_started
    
  #
  #   User Service 
  #
  user-service:
    build: ./user_service
    container_name: user-service
    expose:
      - 7000
    ports:
      - "7000:7000"
    depends_on:
      kafka_broker:
        condition: service_started
      postgres-db: 
        condition: service_started
      redis-db: 
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOKI_URI=http://loki:3100/loki/api/v1/push
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    networks:
      - friend-recommendation-system
  #
  #   API GATEWAY
  #
  api-gateway:  
    build: ./api_gateway
    container_name: api_gateway
    expose:
      - 8090
    ports:
      - "8090:8090"
    depends_on:
      redis-db: 
        condition: service_started
    networks:
      - friend-recommendation-system
      - LOKI_URI=http://loki:3100/loki/api/v1/push
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411

  #
  #
  # Redis db
  redis-db:
    image: redis:latest
    container_name: redis-db
    command: [ "redis-server", "--protected-mode", "no" ]
    ports:
    - "6379:6379"
    networks:
      - friend-recommendation-system
  
  #
  #
  # PostgreSQL
  #
  #
  postgres-db:
    image: postgres
    restart: always
    container_name: postgres-container-test
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      # - ./document/data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=users
    networks:
      - friend-recommendation-system
  #
  #   Apache Kafka Cluster 
  #
  # 
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - friend-recommendation-system
  #
  #   
  #
  #
  kafka_broker:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_broker
    ports:
      - "9191:9191"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker:9191
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - friend-recommendation-system

  #
  #
  # Mongo Db
  mongo-db:
    image: "mongo:latest"
    container_name: mongo-container
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - friend-recommendation-system
  
  #
  #
  # Neo4j
  #
  neo4j-db:
    container_name: neo4j
    image: bitnami/neo4j:latest
    ports:
      - "7475:7474"
      - "7687:7687"
      - "7473:7473"
    networks:
      - friend-recommendation-system
    environment:
      - NEO4J_PASSWORD= password
      - NEO4J_HOST= username
      - NEO4J_ALLOW_UPGRADE=true
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]




######################################################################################
#
#
#
#       Monitoring and Logging Tools
#
#
#
######################################################################################
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.82.0
    restart: always
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./monitoring/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    networks:
      - friend-recommendation-system


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    depends_on:
      - loki
      - prometheus
      - tempo
    ports:
      - '3000:3000'
    volumes:
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    networks:
      - friend-recommendation-system


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      cadvisor:
        condition: service_started
    networks:
      - friend-recommendation-system


  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - '9093:9093'
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    networks:
      - friend-recommendation-system


  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: always
    ports:
      - '8080:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      redis-db:
        condition: service_started
    networks:
      - friend-recommendation-system


  promtail:
    image: grafana/promtail:2.1.0
    container_name: promtail
    volumes:
      - ./monitoring/promtail/promtail.yml:/etc/promtail/promtail.yml
      # - ../logs/loki.log:/var/log/spring.log
    command: 
      - "--config.file=/etc/promtail/promtail.yml"
    ports:
      - "9080:9080"
    depends_on:
      - loki
    networks:
      - friend-recommendation-system


  loki:
    image: grafana/loki:2.7.3
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - friend-recommendation-system

  tempo:
    image: grafana/tempo:2.0.0
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3200:3200"     # Tempo
      # - "4317"          # OTLP
      - "9411:9411"     # Zipkin
    volumes:
      - ./monitoring/tempo/tempo.yml:/etc/tempo-config.yml
    networks:
      - friend-recommendation-system


networks:
  friend-recommendation-system:
    external: false
    driver: bridge
volumes:
  mongodb_data_container:
  db-data:
  zookeeper_data:
    driver: bridge
  kafka_data:
    driver: bridge

